name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '6.0'

jobs:
#  build_and_test:
#    name: Build and Test
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3

#    - name: Setup .NET
#      uses: actions/setup-dotnet@v1
#      with:
#        dotnet-version: ${{ env.DOTNET_VERSION }}

#    - name: Restore dependencies
#      run: dotnet restore

#    - name: Build with Release configuration
#      run: dotnet build --configuration Release --no-restore

#    - name: Run tests
#      run: dotnet test -v n /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=TestResults/
      
#    - name: Publish coverage report to coveralls.io   
#      uses: coverallsapp/github-action@master   
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }} 
#        path-to-lcov: Uri.Query.String.Composer.Tests/TestResults/coverage.info

  pack_and_publish:
    name: Pack and Publish
    runs-on: ubuntu-latest
#    needs: build_and_test
#    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Get project version
      uses: kzrnm/get-net-sdk-project-versions-action@v1
      id: get-package-version
      with:
        proj-path: Uri.Query.String.Composer/UriQueryStringComposer.csproj
          
    - name: Get NUGET published versions
      uses: fjogeleit/http-request-action@v1
      id: get-nuget-published-packages
      with:
        url: 'https://api.nuget.org/v3-flatcontainer/uri.querystring.composer/index.json'
        method: 'GET'
        
    - name: Compare versions
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          try {
            const versions = JSON.parse('${{ steps.get-nuget-published-packages.outputs.response }}');
            const lastVersions = versions[versions.length - 1];
          } catch(error) {
            core.error("Error while reading or parsing the JSON");
            core.setFailed(error);
          }
        
#    - name: Publish to nuget on version change
#      uses: alirezanet/publish-nuget@v3.0.4
#      with:
#        PROJECT_FILE_PATH: Uri.Query.String.Composer/UriQueryStringComposer.csproj
#        PACKAGE_NAME: Uri.QueryString.Composer
#        VERSION_REGEX: <PackageVersion>(.*)<\/PackageVersion>
#        NUGET_KEY: ${{ secrets.NUGET_API_KEY }}

#    - name: Publish to github on version change
#      uses: Victorvhn/publish-github@v3.0.0
#      with:
#       PROJECT_FILE_PATH: Uri.Query.String.Composer/UriQueryStringComposer.csproj
#       PACKAGE_NAME: Uri.QueryString.Composer
#        VERSION_REGEX: <PackageVersion>(.*)<\/PackageVersion>
#        GITHUB_KEY: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        GITHUB_USER: victorvhn
#        TAG_COMMIT: false

#    - name: Publish to github on version change
#      run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/victorvhn/index.json" --skip-duplicate
