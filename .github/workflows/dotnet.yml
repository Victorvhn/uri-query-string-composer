name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '6.0'

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore
        echo "✅ Project restored"

    - name: Build with Release configuration
      run: |
        dotnet build --configuration Release --no-restore
        echo "✅ Project builded"

    - name: Run tests
      run: |
        dotnet test -v n /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=TestResults/
        echo "✅ Tests executed"
      
    - name: Publish coverage report to coveralls.io   
      uses: coverallsapp/github-action@master   
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        path-to-lcov: Uri.Query.String.Composer.Tests/TestResults/coverage.info
        
    - name: Pack .nupkg
      run: |
        dotnet pack --no-build --configuration Release Uri.Query.String.Composer/UriQueryStringComposer.csproj --output ./package
        echo "✅ Package created"
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package
        path: ./package

  check_version:
    name: Check Version
    runs-on: ubuntu-latest
    needs: build_and_test
#    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
        
    - name: Get project version
      uses: kzrnm/get-net-sdk-project-versions-action@v1
      id: get-package-version
      with:
        proj-path: Uri.Query.String.Composer/UriQueryStringComposer.csproj
          
    - name: Get NUGET published versions
      uses: fjogeleit/http-request-action@v1
      id: get-nuget-published-packages
      with:
        url: 'https://api.nuget.org/v3-flatcontainer/uri.querystring.composer/index.json'
        method: 'GET'
        
    - name: Check published versions
      uses: actions/github-script@v6
      id: check-published-versions
      with:
        result-encoding: string
        script: |
          try {
            const json = JSON.parse('${{ steps.get-nuget-published-packages.outputs.response }}');
            const packageVersions = '${{ steps.get-package-version.outputs.package-version }}';
            const isPackageAlreadyPublished = json.versions.includes(packageVersions);
            
            if (isPackageAlreadyPublished) {
              console.log('❗️ The package version has not changed and it will not be published.');
              return 'false'
            } else {
              console.log('✨ New version found and it will be published.');
              return 'true';
            }
          } catch(error) {
            core.error("❗️ Error while reading or parsing the JSON");
            core.setFailed(error);
          }
          
  publish_package:
    name: Publish package
    runs-on: ubuntu-latest
    needs: [check_version]
    if: ${{ needs.check_version.check-published-versions.outputs.result == 'true' }}
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
    
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: package
    
      - name: Publish .nupkg to NUGET
        run: dotnet nuget push *nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
    
#    - name: Publish to github on version change
#      uses: Victorvhn/publish-github@v3.0.0
#      with:
#       PROJECT_FILE_PATH: Uri.Query.String.Composer/UriQueryStringComposer.csproj
#       PACKAGE_NAME: Uri.QueryString.Composer
#        VERSION_REGEX: <PackageVersion>(.*)<\/PackageVersion>
#        GITHUB_KEY: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        GITHUB_USER: victorvhn
#        TAG_COMMIT: false
