name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '6.0'

jobs:
  a:
    name: a
    runs-on: ubuntu-latest
    steps:
      - run: echo "A"
      - id: set
        run: |
          json=['1.0.0','2.0.0']
          if [[ " ${json[@]} " =~ " 2.0.0 " ]]; then
            echo "Aqui 1"
            echo "publish=no" >> $GITHUB_OUTPUT
          else
            echo "Aqui 2"
            echo "publish=yes" >> $GITHUB_OUTPUT
          fi
    outputs:
      publish: ${{ steps.set.outputs.publish }}
      
  b:
    name: b
    runs-on: ubuntu-latest
    needs:
      - a
    if: needs.a.outputs.publish == 'yes'
    steps:
      - run: echo "B"

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs:
      - b
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: |
          dotnet restore
          echo "✅ Project restored"

      - name: Build with Release configuration
        run: |
          dotnet build --configuration Release --no-restore
          echo "✅ Project builded"

      - name: Run tests
        run: |
          dotnet test -v n /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=TestResults/
          echo "✅ Tests executed"
      
      - name: Publish coverage report to coveralls.io   
        uses: coverallsapp/github-action@master   
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          path-to-lcov: Uri.Query.String.Composer.Tests/TestResults/coverage.info
        
      - name: Pack .nupkg
        run: |
          dotnet pack --no-build --configuration Release Uri.Query.String.Composer/UriQueryStringComposer.csproj --output ./package
          echo "✅ Package created"
    
      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ./package

  check_version:
    name: Check Version
    runs-on: ubuntu-latest
    needs: build_and_test
#    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        
      - name: Get project version
        uses: kzrnm/get-net-sdk-project-versions-action@v1
        id: get-package-version
        with:
          proj-path: Uri.Query.String.Composer/UriQueryStringComposer.csproj
          
      - name: Get NUGET published versions
        uses: fjogeleit/http-request-action@v1
        id: get-nuget-published-packages
        with:
          url: 'https://api.nuget.org/v3-flatcontainer/uri.querystring.composer/index.json'
          method: 'GET'
    
      - name: Should publish package
        id: should-published-versions
        run: echo "is_package_published=contains(fromJson('${{ steps.get-nuget-published-packages.outputs.response }}'), '${{ steps.get-package-version.outputs.package-version }}')" >> $GITHUB_OUTPUT
    
  publish_package:
    name: Publish package
    runs-on: ubuntu-latest
    needs: check_version
#    if: ${{ needs.check_version.should-published-versions.is_package_published == 'false' }}
    steps:
      - name: A
        run: echo ${{ needs.check_version.should-published-versions.is_package_published }}
    
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
    
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: package
    
      - name: Publish .nupkg to NUGET
        run: dotnet nuget push *nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
    
#    - name: Publish to github on version change
#      uses: Victorvhn/publish-github@v3.0.0
#      with:
#       PROJECT_FILE_PATH: Uri.Query.String.Composer/UriQueryStringComposer.csproj
#       PACKAGE_NAME: Uri.QueryString.Composer
#        VERSION_REGEX: <PackageVersion>(.*)<\/PackageVersion>
#        GITHUB_KEY: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        GITHUB_USER: victorvhn
#        TAG_COMMIT: false
